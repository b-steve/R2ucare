mat <- c()#
mat <- read.table("example_matrix", sep="\t", #
                  header = T, #
                  row.names = 1)
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4
test3Gsm  (mat,n_history)
test3Gsm
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)
test3Gsm(mat,n_history)
test3Gsm
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
testMitec(mat,n_history)
testMltec(mat,n_history)
debug()
debug(test3Gsm)
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
batchpost
res
batchpost
nrow(batchpost)
c(1,2,3)
matrix(c(1,2,3))
as.matrix(c(1,2,3))
matrix(c(1,2,3),nrow=1)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
test3Gsr(mat,n_history)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
debug(test3Gsm)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
res
batchpost
debug(test3Gsm)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
?debug
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE
debug(test3Gsm)
test3Gsm(mat,n_history)
batchpost
i
k
batchpost[,(i+1):k]
if (i!=(k-1)){#
                epost = apply(batchpost[,(i+1):k]!=0,1,which.max)#
            } else {#
                epost = rep(1,nrow(batchpost))#
            }
batchpost[, (i + 1):k]
apply(batchpost[, (i + 1):k] != 0, 1, which.max)
batchpost[, (i + 1):k] != 0
batchpost
which.max(batchpost[,(i+1):k]!=0)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
debug(test3Gsm)
test3Gsm(mat,n_history)
tt
eante
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
?test3Gsm
geese = system.file("extdata", "geese.inp", package = "R2ucare")#
geese = read_inp(geese)#
#
# Get encounter histories and number of individuals with corresponding histories#
geese.hist = geese$encounter_histories#
geese.freq = geese$sample_size#
#
# perform Test.3.GSm#
test3Gsm(geese.hist,geese.freq)
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)
##### Load the database #####
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)#
test3Gsr(mat,n_history)#
test3Gwbwa(mat,n_history)
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)#
# Put again the zeros as fours for U_CARE#
#mat[mat==0]<-4#
test3Gsm(mat,n_history)#
test3Gsr(mat,n_history)#
test3Gwbwa(mat,n_history)
testMitec(mat,n_history)#
testMltec(mat,n_history)
overall_JMV(mat,n_history)
library("devtools")#
install_github('oliviergimenez/R2ucare')
mat <- c()#
mat <- read.table("/Users/oliviergimenez/Dropbox/OG/GITHUB/R2ucare/corrected_bugs/ruben/example_matrix", sep="\t",#
                  header = T,#
                  row.names = 1)#
#
# Put the 4 as 0 to assess that all time steps have individuals and that all individuals had a capture#
mat[mat==4]<-0#
mat <- as.matrix(mat)#
dim(mat)#
# (1) Assess that there is at least one individual in any time step#
check <- as.vector(apply(mat, 2, sum))#
sum(check==0)#
cat("0 indicates that all sampling occasions had at least 1 individual")#
cat("I put it to assess that this was not the error")#
#
# (2) Assess that all individuals were captured at least once#
check_indiv <- apply(mat, 1, sum); min(check_indiv)#
cat("The minimum value should be 1")#
if (min(check_indiv>0)){#
  cat("Correct")#
} else {#
  cat("error")#
}#
#
# Create a vector indicating the number of individuals with this history#
# As I create one row per individual I have to put one a 1#
n_history <- rep(1, times=nrow(mat))#
length(n_history)==nrow(mat)#
#
library(R2ucare)
test3Gsm(mat,n_history)
