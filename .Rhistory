mixandbases[,(a+1):(2*a)] = mixandbases[,(a+1):(2*a)] + mixandbases[,(2*a+1):(3*a)]
mixandbases = mixandbases[,-((2*a+1):(3*a))]
}
nk = nrow(mixandbases)
tabtemp = mixandbases[(nk-a+1):nk,]
#tabtemp = tabtemp[filtre,] # les bases filtrees
mixandbases = rbind(mixandbases[1:(nk-a),],tabtemp)
nj = nrow(tabtemp)
nk = nrow(mixandbases)
if (any(apply(tabtemp,1,sum)==0) | (nj==0)){
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
break
}
# pooling
mixandbases = pooling_mixtures(nk,nj,a,mixandbases)
# DEBUT DU CALCUL DU TEST DE MELANGE (traduit de Yantis et al)
indic_mixbasis = c(matrix(0,nrow=nrow(mixandbases)-nj,ncol=1),rep(1,nj)) # indique 1 ou 0 suivant que base ou melange
data = cbind(mixandbases,indic_mixbasis)
#if verbosity>=3
#    strtable=[ strtable {strcat('occasion :',num2str(i))} ];
#    taille=size(data,2);
#    strtable=[ strtable {'--------------- Seen again - Seen again later '} ];
#    for kk=1:size(data,1)
#        if data(kk,taille)==0
#            strtable=[ strtable {strcat('When last released | ',num2str(data(kk,1:taille-1))) }];
#        else
#            strtable=[ strtable {strcat('Currently released | ',num2str(data(kk,1:taille-1))) }];
#        end
#    end
#end
nk = nrow(data)
r = ncol(data)
ni = r - 1
data = t(data)
nature = data[r,] # il s'agit de indic_mixanbasis'
data = data[-r,] # on la supprime !!!
tri = which(nature!=0) # coordonnees des bases
nj = length(tri) # nombre de bases
tri = c(tri,which(nature==0)) # ajout des coordonnees des melanges
M = data[,tri] # on renumerote bases et melanges
totk = apply(M,2,sum) # effectif des colonnes
CoorMelVide = which(totk[(nj+1):nk]==0)
if (!(length(CoorMelVide)==0)) M = M[,-CoorMelVide]
nk = ncol(M)
totk = apply(M,2,sum) # actualisation des effectifs des colonnes
# Si aucune base n'est vide & si melanges
if (nj!=nk){
# NEW definition des bases
Np = t(M[,1:nj])
# definition des melanges
Mp = t(M[,(nj+1):nk])
# calcul des coefficients du melanges
res = coef_mixtures(Mp,Np)
Q = res$P
P = res$PI
A = res$GAM
Q = rbind(P,Q)
# calcul des valeurs attendues
theoriques = matrix(rep(totk,ni),byrow=T,nrow=ni) * t(Q)
# calcul du nombre de degres de liberte
df = (nk-nj)*(ni-nj)
# test LR
tempchi2 = gof_test(1,c(M),c(theoriques))
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = tempchi2
table_multi_mitec[i-1,3] = df
table_multi_mitec[i-1,4] = 1-pchisq(tempchi2,df)
table_multi_mitec[i-1,5] = 'Chi-square'
} else {
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
}
Np
res = coef_mixtures(Mp,Np)
# various quantities to be defined
M = Mp
N = Np
s = nrow(N) # s = nb of bases
n = ncol(N)
nbmel = nrow(M) # nb of mixtures
dim(M) = c(1,nbmel*n)
dim(N) = c(1,s*n)
# run 5 times the optimization procedure to try and handle with local minima
# initial values
x = matrix(runif(nbmel*(s-1)+s*(n-1)),nrow=nbmel*(s-1)+s*(n-1),ncol=1)
# Minimization
tmpmin = optim(x,deviance_mixture,NULL,hessian=FALSE,M,N,s,n,nbmel,method="BFGS",control=list(trace=0, reltol=.0000001,abstol=.000001))
tmpmin
x2 = matrix(runif(nbmel*(s-1)+s*(n-1)),nrow=nbmel*(s-1)+s*(n-1),ncol=1)
# Minimization
tmpmin2 = optim(x2,deviance_mixture,NULL,hessian=FALSE,M,N,s,n,nbmel,method="BFGS",control=list(trace=0, reltol=.0000001,abstol=.000001))
tmpmin2
x2 = matrix(runif(nbmel*(s-1)+s*(n-1)),nrow=nbmel*(s-1)+s*(n-1),ncol=1)
# Minimization
tmpmin2 = optim(x2,deviance_mixture,NULL,hessian=FALSE,M,N,s,n,nbmel,method="BFGS",control=list(trace=0, reltol=.0000001,abstol=.000001))
tmpmin2$value
x2 = matrix(runif(nbmel*(s-1)+s*(n-1)),nrow=nbmel*(s-1)+s*(n-1),ncol=1)
# Minimization
tmpmin2 = optim(x2,deviance_mixture,NULL,hessian=FALSE,M,N,s,n,nbmel,method="BFGS",control=list(trace=0, reltol=.0000001,abstol=.000001))
tmpmin2$value
if (tmpmin2$value < tmpmin$value) {tmpmin = tmpmin2}
tmpmin
tmpmin$par
mixandbases = datat[debutligne:finligne[i],debutcolonne[i]:fincolonne]
for (j in 1:(i-2)){
if ((i-2)<1) break
mixandbases[1:a,] = mixandbases[1:a,] + mixandbases[(a+1):(2*a),]
mixandbases = mixandbases[-((a+1):(2*a)),]
}
for (j in 1:((ncol(mixandbases)-a)/a-1)){
if (((ncol(mixandbases)-a)/a-1)<1) break
mixandbases[,(a+1):(2*a)] = mixandbases[,(a+1):(2*a)] + mixandbases[,(2*a+1):(3*a)]
mixandbases = mixandbases[,-((2*a+1):(3*a))]
}
nk = nrow(mixandbases)
tabtemp = mixandbases[(nk-a+1):nk,]
#tabtemp = tabtemp[filtre,] # les bases filtrees
mixandbases = rbind(mixandbases[1:(nk-a),],tabtemp)
nj = nrow(tabtemp)
nk = nrow(mixandbases)
if (any(apply(tabtemp,1,sum)==0) | (nj==0)){
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
break
}
# pooling
mixandbases = pooling_mixtures(nk,nj,a,mixandbases)
# DEBUT DU CALCUL DU TEST DE MELANGE (traduit de Yantis et al)
indic_mixbasis = c(matrix(0,nrow=nrow(mixandbases)-nj,ncol=1),rep(1,nj)) # indique 1 ou 0 suivant que base ou melange
data = cbind(mixandbases,indic_mixbasis)
#if verbosity>=3
#    strtable=[ strtable {strcat('occasion :',num2str(i))} ];
#    taille=size(data,2);
#    strtable=[ strtable {'--------------- Seen again - Seen again later '} ];
#    for kk=1:size(data,1)
#        if data(kk,taille)==0
#            strtable=[ strtable {strcat('When last released | ',num2str(data(kk,1:taille-1))) }];
#        else
#            strtable=[ strtable {strcat('Currently released | ',num2str(data(kk,1:taille-1))) }];
#        end
#    end
#end
nk = nrow(data)
r = ncol(data)
ni = r - 1
data = t(data)
nature = data[r,] # il s'agit de indic_mixanbasis'
data = data[-r,] # on la supprime !!!
tri = which(nature!=0) # coordonnees des bases
nj = length(tri) # nombre de bases
tri = c(tri,which(nature==0)) # ajout des coordonnees des melanges
M = data[,tri] # on renumerote bases et melanges
totk = apply(M,2,sum) # effectif des colonnes
CoorMelVide = which(totk[(nj+1):nk]==0)
if (!(length(CoorMelVide)==0)) M = M[,-CoorMelVide]
nk = ncol(M)
totk = apply(M,2,sum) # actualisation des effectifs des colonnes
# Si aucune base n'est vide & si melanges
if (nj!=nk){
# NEW definition des bases
Np = t(M[,1:nj])
# definition des melanges
Mp = t(M[,(nj+1):nk])
# calcul des coefficients du melanges
res = coef_mixtures(Mp,Np)
Q = res$P
P = res$PI
A = res$GAM
Q = rbind(P,Q)
# calcul des valeurs attendues
theoriques = matrix(rep(totk,ni),byrow=T,nrow=ni) * t(Q)
# calcul du nombre de degres de liberte
df = (nk-nj)*(ni-nj)
# test LR
tempchi2 = gof_test(1,c(M),c(theoriques))
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = tempchi2
table_multi_mitec[i-1,3] = df
table_multi_mitec[i-1,4] = 1-pchisq(tempchi2,df)
table_multi_mitec[i-1,5] = 'Chi-square'
} else {
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
}
tempchi2
mixandbases = datat[debutligne:finligne[i],debutcolonne[i]:fincolonne]
for (j in 1:(i-2)){
if ((i-2)<1) break
mixandbases[1:a,] = mixandbases[1:a,] + mixandbases[(a+1):(2*a),]
mixandbases = mixandbases[-((a+1):(2*a)),]
}
for (j in 1:((ncol(mixandbases)-a)/a-1)){
if (((ncol(mixandbases)-a)/a-1)<1) break
mixandbases[,(a+1):(2*a)] = mixandbases[,(a+1):(2*a)] + mixandbases[,(2*a+1):(3*a)]
mixandbases = mixandbases[,-((2*a+1):(3*a))]
}
nk = nrow(mixandbases)
tabtemp = mixandbases[(nk-a+1):nk,]
#tabtemp = tabtemp[filtre,] # les bases filtrees
mixandbases = rbind(mixandbases[1:(nk-a),],tabtemp)
nj = nrow(tabtemp)
nk = nrow(mixandbases)
if (any(apply(tabtemp,1,sum)==0) | (nj==0)){
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
break
}
# pooling
mixandbases = pooling_mixtures(nk,nj,a,mixandbases)
# DEBUT DU CALCUL DU TEST DE MELANGE (traduit de Yantis et al)
indic_mixbasis = c(matrix(0,nrow=nrow(mixandbases)-nj,ncol=1),rep(1,nj)) # indique 1 ou 0 suivant que base ou melange
data = cbind(mixandbases,indic_mixbasis)
#if verbosity>=3
#    strtable=[ strtable {strcat('occasion :',num2str(i))} ];
#    taille=size(data,2);
#    strtable=[ strtable {'--------------- Seen again - Seen again later '} ];
#    for kk=1:size(data,1)
#        if data(kk,taille)==0
#            strtable=[ strtable {strcat('When last released | ',num2str(data(kk,1:taille-1))) }];
#        else
#            strtable=[ strtable {strcat('Currently released | ',num2str(data(kk,1:taille-1))) }];
#        end
#    end
#end
nk = nrow(data)
r = ncol(data)
ni = r - 1
data = t(data)
nature = data[r,] # il s'agit de indic_mixanbasis'
data = data[-r,] # on la supprime !!!
tri = which(nature!=0) # coordonnees des bases
nj = length(tri) # nombre de bases
tri = c(tri,which(nature==0)) # ajout des coordonnees des melanges
M = data[,tri] # on renumerote bases et melanges
totk = apply(M,2,sum) # effectif des colonnes
CoorMelVide = which(totk[(nj+1):nk]==0)
if (!(length(CoorMelVide)==0)) M = M[,-CoorMelVide]
nk = ncol(M)
totk = apply(M,2,sum) # actualisation des effectifs des colonnes
# Si aucune base n'est vide & si melanges
if (nj!=nk){
# NEW definition des bases
Np = t(M[,1:nj])
# definition des melanges
Mp = t(M[,(nj+1):nk])
# calcul des coefficients du melanges
res = coef_mixtures(Mp,Np)
Q = res$P
P = res$PI
A = res$GAM
Q = rbind(P,Q)
# calcul des valeurs attendues
theoriques = matrix(rep(totk,ni),byrow=T,nrow=ni) * t(Q)
# calcul du nombre de degres de liberte
df = (nk-nj)*(ni-nj)
# test LR
tempchi2 = gof_test(1,c(M),c(theoriques))
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = tempchi2
table_multi_mitec[i-1,3] = df
table_multi_mitec[i-1,4] = 1-pchisq(tempchi2,df)
table_multi_mitec[i-1,5] = 'Chi-square'
} else {
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
};
mixandbases = datat[debutligne:finligne[i],debutcolonne[i]:fincolonne]
for (j in 1:(i-2)){
if ((i-2)<1) break
mixandbases[1:a,] = mixandbases[1:a,] + mixandbases[(a+1):(2*a),]
mixandbases = mixandbases[-((a+1):(2*a)),]
}
for (j in 1:((ncol(mixandbases)-a)/a-1)){
if (((ncol(mixandbases)-a)/a-1)<1) break
mixandbases[,(a+1):(2*a)] = mixandbases[,(a+1):(2*a)] + mixandbases[,(2*a+1):(3*a)]
mixandbases = mixandbases[,-((2*a+1):(3*a))]
}
nk = nrow(mixandbases)
tabtemp = mixandbases[(nk-a+1):nk,]
#tabtemp = tabtemp[filtre,] # les bases filtrees
mixandbases = rbind(mixandbases[1:(nk-a),],tabtemp)
nj = nrow(tabtemp)
nk = nrow(mixandbases)
if (any(apply(tabtemp,1,sum)==0) | (nj==0)){
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
break
}
# pooling
mixandbases = pooling_mixtures(nk,nj,a,mixandbases)
# DEBUT DU CALCUL DU TEST DE MELANGE (traduit de Yantis et al)
indic_mixbasis = c(matrix(0,nrow=nrow(mixandbases)-nj,ncol=1),rep(1,nj)) # indique 1 ou 0 suivant que base ou melange
data = cbind(mixandbases,indic_mixbasis)
#if verbosity>=3
#    strtable=[ strtable {strcat('occasion :',num2str(i))} ];
#    taille=size(data,2);
#    strtable=[ strtable {'--------------- Seen again - Seen again later '} ];
#    for kk=1:size(data,1)
#        if data(kk,taille)==0
#            strtable=[ strtable {strcat('When last released | ',num2str(data(kk,1:taille-1))) }];
#        else
#            strtable=[ strtable {strcat('Currently released | ',num2str(data(kk,1:taille-1))) }];
#        end
#    end
#end
nk = nrow(data)
r = ncol(data)
ni = r - 1
data = t(data)
nature = data[r,] # il s'agit de indic_mixanbasis'
data = data[-r,] # on la supprime !!!
tri = which(nature!=0) # coordonnees des bases
nj = length(tri) # nombre de bases
tri = c(tri,which(nature==0)) # ajout des coordonnees des melanges
M = data[,tri] # on renumerote bases et melanges
totk = apply(M,2,sum) # effectif des colonnes
CoorMelVide = which(totk[(nj+1):nk]==0)
if (!(length(CoorMelVide)==0)) M = M[,-CoorMelVide]
nk = ncol(M)
totk = apply(M,2,sum) # actualisation des effectifs des colonnes
# Si aucune base n'est vide & si melanges
if (nj!=nk){
# NEW definition des bases
Np = t(M[,1:nj])
# definition des melanges
Mp = t(M[,(nj+1):nk])
# calcul des coefficients du melanges
res = coef_mixtures(Mp,Np)
Q = res$P
P = res$PI
A = res$GAM
Q = rbind(P,Q)
# calcul des valeurs attendues
theoriques = matrix(rep(totk,ni),byrow=T,nrow=ni) * t(Q)
# calcul du nombre de degres de liberte
df = (nk-nj)*(ni-nj)
# test LR
tempchi2 = gof_test(1,c(M),c(theoriques))
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = tempchi2
table_multi_mitec[i-1,3] = df
table_multi_mitec[i-1,4] = 1-pchisq(tempchi2,df)
table_multi_mitec[i-1,5] = 'Chi-square'
} else {
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
};tempchi2
install_github('oliviergimenez/R2ucare')
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
install_github('oliviergimenez/R2ucare')
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "sooty.inp", package = "R2ucare")
geese = read_inp(geese)
# Get encounter histories and number of individuals with corresponding histories
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
# perform TestM.ITEC
testMitec(geese.hist,geese.freq)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = read_inp(geese)
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
test3Gwbwa(geese.hist,geese.freq)
test3Gsr(geese.hist,geese.freq)
test3Gsm(geese.hist,geese.freq)
testMitec(geese.hist,geese.freq)
testMltec(geese.hist,geese.freq)
library(R2ucare)
library(R2ucare)
library(R2ucare)
?test2ct
library(R2ucare)
?test2ct
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
install.packages('roxygen2', repos='http://cran.us.r-project.org')
install.packages('devtools', repos='http://cran.us.r-project.org')
install_github('oliviergimenez/R2ucare')
library("devtools")
install_github('oliviergimenez/R2ucare')
install.packages('sp', repos='http://cran.us.r-project.org')
install.packages('rgdal', repos='http://cran.us.r-project.org')
